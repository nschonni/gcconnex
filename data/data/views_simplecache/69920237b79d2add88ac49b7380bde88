//<script>
elgg.provide('elgg.admin');

elgg.admin.init = function () {

	// system messages do not fade in admin area, instead slide up when clicked
	$('.elgg-system-messages li').stop(true);
	$('.elgg-system-messages li').die('click');
	$('.elgg-system-messages li').live('click', function() {
		$(this).stop().slideUp('medium');
	});

	// draggable plugin reordering
	$('#elgg-plugin-list > ul').sortable({
		items:                'li:has(> .elgg-state-draggable)',
		handle:               '.elgg-head',
		forcePlaceholderSize: true,
		placeholder:          'elgg-widget-placeholder',
		opacity:              0.8,
		revert:               500,
		stop:                 elgg.admin.movePlugin
	});

	// in-line editing for custom profile fields.
	// @note this requires jquery.jeditable plugin
	$(".elgg-state-editable").editable(elgg.admin.editProfileField, {
		type:   'text',
		onblur: 'submit',
		width:  '300px',
		height: 'none',
		style:  'display:inline;'
	});

	// draggable profile field reordering.
	$('#elgg-profile-fields').sortable({
		items: 'li',
		handle: 'span.elgg-state-draggable',
		stop: elgg.admin.moveProfileField
	});

	// admin notices delete ajax
	$('a.elgg-admin-notice').click(elgg.admin.deleteNotice);

	// disable checkboxes (readonly does not work for them)
	$('input:checkbox.elgg-state-disabled, label.elgg-state-disabled > input:checkbox')
			.live('click', function() {return false;});

	// disable simple cache compress settings if simple cache is off
	$('[name=simplecache_enabled]').click(elgg.admin.simplecacheToggle);
};

/**
 * Save the plugin order after a move event.
 *
 * @param {Object} e  Event object.
 * @param {Object} ui jQueryUI object
 * @return void
 */
elgg.admin.movePlugin = function(e, ui) {
	// get guid from id like elgg-object-<guid>
	var pluginGuid = ui.item.attr('id');
	pluginGuid = pluginGuid.replace('elgg-object-', '');

	elgg.action('admin/plugins/set_priority', {
		data: {
			plugin_guid: pluginGuid,
			// we start at priority 1
			priority: ui.item.index() + 1
		},
		success: function() {
			// update plugins with priority dependences
			var priorityDep = new RegExp(elgg.echo('ElggPlugin:Dependencies:Priority'));
			ui.item.siblings().andSelf().each(function() {
				if (priorityDep.test($(this).find('.elgg-dependency-requires').text())) {
					elgg.admin.updatePluginView($(this));
				}
			});
		}
	});
};

/**
 * Update the plugin view.
 *
 * @param {Object} pluginView Plugin view element to update
 * @return void
 */
elgg.admin.updatePluginView = function(pluginView) {
	// get guid from id like elgg-object-<guid>
	var pluginGuid = pluginView.attr('id');
	pluginGuid = pluginGuid.replace('elgg-object-', '');

	elgg.get({
		url: elgg.config.wwwroot + "ajax/view/object/plugin/full",
		dataType: "html",
		cache: false,
		data: {
			guid: pluginGuid,
			display_reordering: true
		},
		success: function(htmlData) {
			if (htmlData.length > 0) {
				pluginView.html(htmlData);
			}
		}
	});
}

/**
 * In-line editing for custom profile fields
 *
 * @param string   value    The new value
 * @param {Object} settings The settings used for editable
 * @return void
 */
elgg.admin.editProfileField = function(value, settings) {
	var id = $(this).attr('id');
	id = id.replace('elgg-profile-field-', '');

	var data = {
		id:    id,
		label: value
	};

	elgg.action('profile/fields/edit', data);
	return value;
};

/**
 * Save the plugin profile order after a move event.
 *
 * @param {Object} e  Event object.
 * @param {Object} ui jQueryUI object
 * @return void
 */
elgg.admin.moveProfileField = function(e, ui) {
	var orderArr = $('#elgg-profile-fields').sortable('toArray');
	var orderStr = orderArr.join(',');

	elgg.action('profile/fields/reorder', {
		fieldorder: orderStr
	});
};

/**
 * Fires the ajax action to delete the admin notice then hides the notice.
 *
 * @return void
 */
elgg.admin.deleteNotice = function(e) {
	e.preventDefault();
	var $container = $(this).closest('p');
	
	elgg.action($(this).attr('href'), {
		success: function(json) {
			$container.slideUp('medium');
		}
	});
};

/**
 * Toggles the display of the compression settings for simplecache
 *
 * @return void
 */
elgg.admin.simplecacheToggle = function() {
	// when the checkbox is disabled, do not toggle the compression checkboxes
	if (!$(this).hasClass('elgg-state-disabled')) {
		var names = ['simplecache_minify_js', 'simplecache_minify_css'];
		for (var i = 0; i < names.length; i++) {
			var $input = $('input[type!=hidden][name="' + names[i] + '"]');
			if ($input.length) {
				$input.parent().toggleClass('elgg-state-disabled');
			}
		}
	}
};

elgg.register_hook_handler('init', 'system', elgg.admin.init, 1000);
//<script>
elgg.provide("elgg.group_tools_admin");

elgg.group_tools_admin.add_tool_preset = function() {
	var $clone_base = $("#group-tools-tool-preset-base");
	var $clone = $clone_base.clone();

	$clone.removeAttr("id").removeClass("hidden");
	$clone.find(">div.hidden").removeClass("hidden");

	// find inputs and set correct name
	var counter = $clone_base.parent().find(">div").length;
	while ($clone_base.parent().find("input[name^='params[" + counter + "]']").length) {
		counter++;
	}
	
	var $inputs = $clone.find(":input");
	$.each($inputs, function(index, object) {
		console.log(object);
		var name = $(object).attr("name");
		console.log(name);
		name = name.replace("params[i]", "params[" + counter + "]");
		
		$(object).attr("name", name);
	});

	require(["group_tools/ToolsEdit"], function(ToolsEdit) {
		ToolsEdit.init($clone);
	});
	
	// insert clone
	$clone.insertBefore($clone_base);

	return false;
}

elgg.group_tools_admin.edit_tool_preset = function(elm) {

	var $container = $(elm).parent().parent().find(">div:last");
	if ($container.is(":visible")) {
		$container.addClass("hidden");
	} else {
		$container.removeClass("hidden");
	}
	
	return false;
}

elgg.group_tools_admin.change_tool_preset_title = function(elm) {
	var $label = $(elm).parent().parent().parent().find("label[rel='title']");
	$label.html($(elm).val());
}

elgg.group_tools_admin.change_tool_preset_description = function(elm) {
	var $container = $(elm).parent().parent().parent().find("div[rel='description']");
	$container.html($(elm).val());
}

elgg.group_tools_admin.delete_tool_preset = function(elm) {
	$(elm).parent().parent().remove();

	return false;
}

elgg.group_tools_admin.init = function() {

	$("#group-tools-special-states-tabs a").live("click", function() {
		// remove all selected tabs
		$("#group-tools-special-states-tabs li").removeClass("elgg-state-selected");
		// select the correct tab
		$(this).parent().addClass("elgg-state-selected");

		// hide all content
		$("#group-tools-special-states-featured, #group-tools-special-states-auto-join, #group-tools-special-states-suggested").addClass("hidden");
		// show the selected content
		$($(this).attr("href")).removeClass("hidden");

		return false;
	});

	$("#group-tools-special-states-featured a.elgg-requires-confirmation, #group-tools-special-states-auto-join a.elgg-requires-confirmation, #group-tools-special-states-suggested a.elgg-requires-confirmation").live("click", function(){

		elgg.action($(this).attr("href"));

		$(this).parent().parent().remove();
		
		return false;
	});

	$("#group-tools-admin-bulk-delete input[name='checkall'][type='checkbox']").live("change", function() {

		if ($(this).is(":checked")) {
			// check
			$("#group-tools-admin-bulk-delete input[name='group_guids[]']").attr("checked", "checked");
		} else {
			// uncheck
			$("#group-tools-admin-bulk-delete input[name='group_guids[]']").removeAttr("checked");
		}
	});
}

//register init hook
elgg.register_hook_handler("init", "system", elgg.group_tools_admin.init);
//<script>
elgg.provide("elgg.widget_manager");

elgg.widget_manager.init_admin = function() {
	$(".widget-manager-fix").live("click", function(event) {
		$(this).toggleClass("fixed");
		guid = $(this).attr("href").replace("#", "");
		
		elgg.action('widget_manager/widgets/toggle_fix', {
				data: {
					guid: guid
				}
			});
		event.stopPropagation();
	});
	
	$("#widget-manager-settings-add-extra-context").live("click", function(event) {
		$("#widget-manager-settings-extra-contexts tr.hidden").clone().insertBefore($("#widget-manager-settings-extra-contexts tr.hidden")).removeClass("hidden");
	});
	
	$("#widget-manager-settings-extra-contexts .elgg-icon-delete").live("click", function(event) {
		$(this).parent().parent().remove();
	});
}

//register init hook
elgg.register_hook_handler("init", "system", elgg.widget_manager.init_admin);